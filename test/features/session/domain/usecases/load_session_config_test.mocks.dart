// Mocks generated by Mockito 5.4.6 from annotations
// in focuslock/test/features/session/domain/usecases/load_session_config_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:focuslock/features/session/domain/entities/session_config.dart'
    as _i2;
import 'package:focuslock/features/session/domain/repositories/session_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSessionConfig_0 extends _i1.SmartFake implements _i2.SessionConfig {
  _FakeSessionConfig_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SessionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionRepository extends _i1.Mock implements _i3.SessionRepository {
  MockSessionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SessionConfig> loadSessionConfig() =>
      (super.noSuchMethod(
            Invocation.method(#loadSessionConfig, []),
            returnValue: _i4.Future<_i2.SessionConfig>.value(
              _FakeSessionConfig_0(
                this,
                Invocation.method(#loadSessionConfig, []),
              ),
            ),
          )
          as _i4.Future<_i2.SessionConfig>);

  @override
  _i4.Future<void> saveSessionConfig(_i2.SessionConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#saveSessionConfig, [config]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> startDeviceLock() =>
      (super.noSuchMethod(
            Invocation.method(#startDeviceLock, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> startDeviceLockWithDuration(Duration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#startDeviceLockWithDuration, [duration]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> endDeviceLock() =>
      (super.noSuchMethod(
            Invocation.method(#endDeviceLock, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> hasRequiredPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#hasRequiredPermissions, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasDeviceAdminPermission() =>
      (super.noSuchMethod(
            Invocation.method(#hasDeviceAdminPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasOverlayPermission() =>
      (super.noSuchMethod(
            Invocation.method(#hasOverlayPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
