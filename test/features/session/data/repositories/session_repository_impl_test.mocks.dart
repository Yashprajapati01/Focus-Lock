// Mocks generated by Mockito 5.4.6 from annotations
// in focuslock/test/features/session/data/repositories/session_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:focuslock/features/session/data/datasources/session_local_datasource.dart'
    as _i3;
import 'package:focuslock/features/session/data/models/session_config_model.dart'
    as _i2;
import 'package:focuslock/features/session/data/services/device_admin_service.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSessionConfigModel_0 extends _i1.SmartFake
    implements _i2.SessionConfigModel {
  _FakeSessionConfigModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SessionLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionLocalDataSource extends _i1.Mock
    implements _i3.SessionLocalDataSource {
  MockSessionLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SessionConfigModel> getSessionConfig() =>
      (super.noSuchMethod(
            Invocation.method(#getSessionConfig, []),
            returnValue: _i4.Future<_i2.SessionConfigModel>.value(
              _FakeSessionConfigModel_0(
                this,
                Invocation.method(#getSessionConfig, []),
              ),
            ),
          )
          as _i4.Future<_i2.SessionConfigModel>);

  @override
  _i4.Future<void> cacheSessionConfig(_i2.SessionConfigModel? config) =>
      (super.noSuchMethod(
            Invocation.method(#cacheSessionConfig, [config]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeviceAdminService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceAdminService extends _i1.Mock
    implements _i5.DeviceAdminService {
  MockDeviceAdminService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> hasDeviceAdminPermission() =>
      (super.noSuchMethod(
            Invocation.method(#hasDeviceAdminPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasOverlayPermission() =>
      (super.noSuchMethod(
            Invocation.method(#hasOverlayPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> startDeviceLock() =>
      (super.noSuchMethod(
            Invocation.method(#startDeviceLock, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> endDeviceLock() =>
      (super.noSuchMethod(
            Invocation.method(#endDeviceLock, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> requestDeviceAdminPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestDeviceAdminPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestOverlayPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestOverlayPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> hasAccessibilityPermission() =>
      (super.noSuchMethod(
            Invocation.method(#hasAccessibilityPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestAccessibilityPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestAccessibilityPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
