// Mocks generated by Mockito 5.4.6 from annotations
// in focuslock/test/features/session/presentation/bloc/session_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:focuslock/features/session/core/error/failures.dart' as _i6;
import 'package:focuslock/features/session/domain/entities/session_config.dart'
    as _i7;
import 'package:focuslock/features/session/domain/repositories/session_repository.dart'
    as _i2;
import 'package:focuslock/features/session/domain/usecases/cancel_session.dart'
    as _i10;
import 'package:focuslock/features/session/domain/usecases/load_session_config.dart'
    as _i4;
import 'package:focuslock/features/session/domain/usecases/save_session_config.dart'
    as _i8;
import 'package:focuslock/features/session/domain/usecases/start_session.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSessionRepository_0 extends _i1.SmartFake
    implements _i2.SessionRepository {
  _FakeSessionRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoadSessionConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadSessionConfig extends _i1.Mock implements _i4.LoadSessionConfig {
  MockLoadSessionConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SessionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSessionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.SessionRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.SessionConfig>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.SessionConfig>>.value(
                  _FakeEither_1<_i6.Failure, _i7.SessionConfig>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.SessionConfig>>);
}

/// A class which mocks [SaveSessionConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveSessionConfig extends _i1.Mock implements _i8.SaveSessionConfig {
  MockSaveSessionConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SessionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSessionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.SessionRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.SessionConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#call, [config]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [config]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [StartSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartSession extends _i1.Mock implements _i9.StartSession {
  MockStartSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SessionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSessionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.SessionRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.SessionConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#call, [config]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [config]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [CancelSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelSession extends _i1.Mock implements _i10.CancelSession {
  MockCancelSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SessionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSessionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.SessionRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}
