// Mocks generated by Mockito 5.4.6 from annotations
// in focuslock/test/features/session/presentation/pages/session_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:focuslock/features/session/domain/usecases/cancel_session.dart'
    as _i5;
import 'package:focuslock/features/session/domain/usecases/load_session_config.dart'
    as _i2;
import 'package:focuslock/features/session/domain/usecases/save_session_config.dart'
    as _i3;
import 'package:focuslock/features/session/domain/usecases/start_session.dart'
    as _i4;
import 'package:focuslock/features/session/presentation/bloc/session_bloc.dart'
    as _i7;
import 'package:focuslock/features/session/presentation/bloc/session_event.dart'
    as _i9;
import 'package:focuslock/features/session/presentation/bloc/session_state.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoadSessionConfig_0 extends _i1.SmartFake
    implements _i2.LoadSessionConfig {
  _FakeLoadSessionConfig_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSaveSessionConfig_1 extends _i1.SmartFake
    implements _i3.SaveSessionConfig {
  _FakeSaveSessionConfig_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStartSession_2 extends _i1.SmartFake implements _i4.StartSession {
  _FakeStartSession_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCancelSession_3 extends _i1.SmartFake implements _i5.CancelSession {
  _FakeCancelSession_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSessionBlocState_4 extends _i1.SmartFake
    implements _i6.SessionBlocState {
  _FakeSessionBlocState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SessionBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionBloc extends _i1.Mock implements _i7.SessionBloc {
  MockSessionBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoadSessionConfig get loadSessionConfig =>
      (super.noSuchMethod(
            Invocation.getter(#loadSessionConfig),
            returnValue: _FakeLoadSessionConfig_0(
              this,
              Invocation.getter(#loadSessionConfig),
            ),
          )
          as _i2.LoadSessionConfig);

  @override
  _i3.SaveSessionConfig get saveSessionConfig =>
      (super.noSuchMethod(
            Invocation.getter(#saveSessionConfig),
            returnValue: _FakeSaveSessionConfig_1(
              this,
              Invocation.getter(#saveSessionConfig),
            ),
          )
          as _i3.SaveSessionConfig);

  @override
  _i4.StartSession get startSession =>
      (super.noSuchMethod(
            Invocation.getter(#startSession),
            returnValue: _FakeStartSession_2(
              this,
              Invocation.getter(#startSession),
            ),
          )
          as _i4.StartSession);

  @override
  _i5.CancelSession get cancelSession =>
      (super.noSuchMethod(
            Invocation.getter(#cancelSession),
            returnValue: _FakeCancelSession_3(
              this,
              Invocation.getter(#cancelSession),
            ),
          )
          as _i5.CancelSession);

  @override
  _i6.SessionBlocState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeSessionBlocState_4(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.SessionBlocState);

  @override
  _i8.Stream<_i6.SessionBlocState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i6.SessionBlocState>.empty(),
          )
          as _i8.Stream<_i6.SessionBlocState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void add(_i9.SessionEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.SessionEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.SessionBlocState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.SessionEvent>(
    _i10.EventHandler<E, _i6.SessionBlocState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i10.Transition<_i9.SessionEvent, _i6.SessionBlocState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i10.Change<_i6.SessionBlocState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
