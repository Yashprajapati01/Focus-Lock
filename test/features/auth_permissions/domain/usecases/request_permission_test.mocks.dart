// Mocks generated by Mockito 5.4.6 from annotations
// in focuslock/test/features/auth_permissions/domain/usecases/request_permission_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:focuslock/core/errors/failures.dart' as _i5;
import 'package:focuslock/features/permissions/domain/entities/permission.dart'
    as _i6;
import 'package:focuslock/features/permissions/domain/entities/permission_progress.dart'
    as _i7;
import 'package:focuslock/features/permissions/domain/repositories/permission_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PermissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionRepository extends _i1.Mock
    implements _i3.PermissionRepository {
  MockPermissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>> requestPermission(
    _i6.PermissionType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, [type]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Permission>(
                    this,
                    Invocation.method(#requestPermission, [type]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>> getPermissionStatus(
    _i6.PermissionType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPermissionStatus, [type]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Permission>(
                    this,
                    Invocation.method(#getPermissionStatus, [type]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Permission>>>
  getAllPermissionStatuses() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPermissionStatuses, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Permission>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Permission>>(
                    this,
                    Invocation.method(#getAllPermissionStatuses, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Permission>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.PermissionProgress>>
  getPermissionProgress() =>
      (super.noSuchMethod(
            Invocation.method(#getPermissionProgress, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i7.PermissionProgress>
                >.value(
                  _FakeEither_0<_i5.Failure, _i7.PermissionProgress>(
                    this,
                    Invocation.method(#getPermissionProgress, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.PermissionProgress>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> areAllPermissionsGranted() =>
      (super.noSuchMethod(
            Invocation.method(#areAllPermissionsGranted, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#areAllPermissionsGranted, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> openPermissionSettings(
    _i6.PermissionType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#openPermissionSettings, [type]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#openPermissionSettings, [type]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
