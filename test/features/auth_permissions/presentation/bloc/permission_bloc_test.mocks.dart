// Mocks generated by Mockito 5.4.6 from annotations
// in focuslock/test/features/auth_permissions/presentation/bloc/permission_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:focuslock/core/errors/failures.dart' as _i5;
import 'package:focuslock/features/permissions/domain/entities/permission.dart'
    as _i6;
import 'package:focuslock/features/permissions/domain/entities/permission_progress.dart'
    as _i10;
import 'package:focuslock/features/permissions/domain/usecases/get_all_permissions.dart'
    as _i3;
import 'package:focuslock/features/permissions/domain/usecases/get_permission_progress.dart'
    as _i9;
import 'package:focuslock/features/permissions/domain/usecases/get_permission_status.dart'
    as _i8;
import 'package:focuslock/features/permissions/domain/usecases/open_permission_settings.dart'
    as _i11;
import 'package:focuslock/features/permissions/domain/usecases/request_permission.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllPermissions].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllPermissions extends _i1.Mock implements _i3.GetAllPermissions {
  MockGetAllPermissions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Permission>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Permission>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Permission>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Permission>>>);
}

/// A class which mocks [RequestPermission].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestPermission extends _i1.Mock implements _i7.RequestPermission {
  MockRequestPermission() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>> call(
    _i7.RequestPermissionParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Permission>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>);
}

/// A class which mocks [GetPermissionStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPermissionStatus extends _i1.Mock
    implements _i8.GetPermissionStatus {
  MockGetPermissionStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>> call(
    _i8.GetPermissionStatusParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Permission>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Permission>>);
}

/// A class which mocks [GetPermissionProgress].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPermissionProgress extends _i1.Mock
    implements _i9.GetPermissionProgress {
  MockGetPermissionProgress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.PermissionProgress>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, _i10.PermissionProgress>
                >.value(
                  _FakeEither_0<_i5.Failure, _i10.PermissionProgress>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i10.PermissionProgress>>);
}

/// A class which mocks [OpenPermissionSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenPermissionSettings extends _i1.Mock
    implements _i11.OpenPermissionSettings {
  MockOpenPermissionSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(
    _i11.OpenPermissionSettingsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
